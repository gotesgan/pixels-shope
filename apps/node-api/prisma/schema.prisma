generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

/// ---
/// Prisma Schema for Multi-Tenant E-commerce Platform
/// ---

// CORE ENTITIES

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String?
  phone     String
  address   String
  city      String
  state     String
  country   String
  zipCode   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]
}

model Store {
  id            String          @id @default(cuid())
  domain        String          @unique
  userId        String
  owner         User            @relation(fields: [userId], references: [id])
  media         Media[]
  HeroSection   HeroSection[]
  storeInfo     StoreInfo?
  phonePe       PhonePe?
  AboutPage     AboutPage?
  ContactPage   ContactPage?
  LegalDocument LegalDocument[]
  phonePeId     String?
  faq           Faq[]
  blog          Blog[]
  Customer      Customer[]
  Order         Order[]
  Razorpay      Razorpay?
  Payment       Payment[]

  @@index([domain])
}

model Customer {
  id                String            @id @default(cuid())
  name              String
  email             String
  password          String
  phone             String
  shippingAddresses ShippingAddress[]
  store             Store             @relation(fields: [storeId], references: [id])
  storeId           String
  orders            Order[]

  @@unique([email, storeId])
  @@unique([phone, storeId])
  @@index([storeId])
}

model Razorpay {
  id        String   @id @default(cuid())
  keyId     String?
  keySecret String?
  isActive  Boolean
  store     Store    @relation(fields: [storeId], references: [id])
  storeId   String   @unique
  createdAt DateTime @default(now())
}

// STORE SETUP
model StoreInfo {
  id          String  @id @default(cuid())
  storeId     String  @unique
  store       Store   @relation(fields: [storeId], references: [id])
  name        String
  media       Media?  @relation("StoreInfoToMedia")
  displayMode Show    @default(both)
  tagline     String?
  description String?
  address     String?
  city        String?
  state       String?
  country     String? @default("India")
  postalCode  String?
  phone       String?

  colour        String?
  businessTypes String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Show {
  logo
  name
  both
}

model HeroSection {
  id       String  @id @default(cuid())
  storeId  String
  store    Store   @relation(fields: [storeId], references: [id])
  title    String?
  subtitle String?
  ctaText  String?
  ctaLink  String?
  media    Media? // one-to-one relation
}

model Media {
  id      String  @id @default(cuid())
  image   String
  storeId String?
  Store   Store?  @relation(fields: [storeId], references: [id])

  heroSectionId String?      @unique
  HeroSection   HeroSection? @relation(fields: [heroSectionId], references: [id])

  storeInfoId String?    @unique
  storeInfo   StoreInfo? @relation("StoreInfoToMedia", fields: [storeInfoId], references: [id])

  blogId      String?
  Blog        Blog?      @relation(fields: [blogId], references: [id])
  AboutPage   AboutPage? @relation(fields: [aboutPageId], references: [id])
  aboutPageId String?
}

// ABOUT PAGE & CONTENT SECTIONS
model AboutPage {
  id      String @id @default(cuid())
  storeId String @unique
  store   Store  @relation(fields: [storeId], references: [id])

  title   String?
  content Json?

  media     Media[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// CONTACT PAGE
model ContactPage {
  id          Int                 @id @default(autoincrement())
  storeId     String              @unique
  store       Store               @relation(fields: [storeId], references: [id])
  submissions ContactSubmission[]
  information ContactInfo[]
  hours       BusinessHours[]
  socialLinks SocialLink[]
  locations   Location[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model ContactSubmission {
  id        Int              @id @default(autoincrement())
  name      String
  email     String
  phone     String
  message   String
  page      ContactPage      @relation(fields: [pageId], references: [id])
  pageId    Int
  createdAt DateTime         @default(now())
  status    SubmissionStatus @default(PENDING)

  @@index([email])
  @@index([status])
}

model ContactInfo {
  id        Int         @id @default(autoincrement())
  type      ContactType
  value     String
  label     String?
  icon      String?
  isPrimary Boolean     @default(false)
  page      ContactPage @relation(fields: [pageId], references: [id])
  pageId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@unique([type, pageId])
  @@index([isPrimary])
}

model BusinessHours {
  id        Int         @id @default(autoincrement())
  days      String
  hours     String
  isActive  Boolean     @default(true)
  sortOrder Int         @default(0)
  page      ContactPage @relation(fields: [pageId], references: [id])
  pageId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([sortOrder])
}

model SocialLink {
  id        Int            @id @default(autoincrement())
  platform  SocialPlatform
  url       String
  icon      String?
  isActive  Boolean        @default(true)
  page      ContactPage    @relation(fields: [pageId], references: [id])
  pageId    Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@unique([platform, pageId])
}

model Location {
  id          Int         @id @default(autoincrement())
  name        String?
  address     String
  city        String
  state       String
  country     String      @default("India")
  postalCode  String?
  mapEmbedUrl String?
  isPrimary   Boolean     @default(false)
  page        ContactPage @relation(fields: [pageId], references: [id])
  pageId      Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([isPrimary])
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  RESPONDED
  SPAM
}

enum ContactType {
  PHONE
  EMAIL
  ADDRESS
  WHATSAPP
  FAX
  OTHER
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TWITTER
  LINKEDIN
  YOUTUBE
  WHATSAPP
  TELEGRAM
  OTHER
}

// LEGAL
model LegalDocument {
  id          String       @id @default(cuid())
  type        DocumentType
  storeId     String
  store       Store        @relation(fields: [storeId], references: [id])
  title       String
  lastUpdated DateTime
  sections    Section[]    @relation("DocumentSections")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Section {
  id         String        @id @default(cuid())
  heading    String
  content    String
  isOrdered  Boolean       @default(false)
  listItems  Json
  documentId String
  document   LegalDocument @relation("DocumentSections", fields: [documentId], references: [id])
}

enum DocumentType {
  PRIVACY
  TERMS
  RETURN
}

// STORE TRANSACTIONS
model Faq {
  id        String   @id @default(cuid())
  storeId   String
  store     Store    @relation(fields: [storeId], references: [id])
  question  String
  answer    String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  description String
  media       Media[]
  storeId     String
  store       Store    @relation(fields: [storeId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Order {
  id                String          @id @default(cuid())
  customer          Customer        @relation(fields: [customerId], references: [id])
  customerId        String
  store             Store           @relation(fields: [storeId], references: [id])
  storeId           String
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String
  items             OrderItem[]
  totalAmount       Float
  currency          String          @default("INR")
  status            OrderStatus     @default(PENDING)
  payment           Payment?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  @@index([customerId])
  @@index([storeId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(cuid())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  productId String
  sku       String
  quantity  Int
  price     Float
  variant   String?
  

  @@index([productId])
}

model ShippingAddress {
  id         String   @id @default(cuid())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String
  name       String
  address    String
  city       String
  state      String
  country    String   @default("India")
  zipCode    String
  orders     Order[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([customerId])
}

model Payment {
  id            String        @id @default(cuid())
  order         Order         @relation(fields: [orderId], references: [id])
  orderId       String        @unique
  amount        Float
  store         Store?        @relation(fields: [storeId], references: [id])
  storeId       String?
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  timestamp     DateTime      @default(now())
}

model PhonePe {
  id            String   @id @default(cuid())
  isActive      Boolean  @default(false)
  storeId       String   @unique
  store         Store    @relation(fields: [storeId], references: [id])
  clientId      String?
  clientSecret  String?
  clientVersion String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  RAZORPAY
  PHONEPE
  CARD
  NETBANKING
  COD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
